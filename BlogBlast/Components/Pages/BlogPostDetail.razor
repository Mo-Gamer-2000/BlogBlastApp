@page "/posts/{postSlug}"
@using BlogBlast.Data.Entities
@using System.Web

@inject NavigationManager NavigationManager
@inject IPostService PostService

<PageTitle>@Utility.GetPageTitle(_post.Title ?? "")</PageTitle>

@if (_post.Id > 0)
{
    <!-- Display section for individual post -->
    <div class="container">
        <div class="jumbotron jumbotron-fluid mb-3 pl-0 pt-0 pb-0 bg-white position-relative">
            <div class="h-100 tofront">
                <div class="row justify-content-between">
                    <!-- Post content -->
                    <div class="col-md-6 pt-6 pb-6 pr-6 align-self-center">
                        <!-- Category link -->
                        <p class="text-uppercase font-weight-bold">
                            <a class="text-danger" href="@_post.Category.Slug-posts">@_post.Category.Name</a>
                        </p>
                        <!-- Post title -->
                        <h1 class="display-4 secondfont mb-3 font-weight-bold">@_post.Title</h1>
                        <!-- Post introduction -->
                        <p class="mb-3">
                            @_post.Introduction
                        </p>
                        <!-- Post author and date -->
                        <div class="d-flex align-items-center">
                            <img class="rounded-circle" src="https://ui-avatars.com/api/?name=@(HttpUtility.UrlEncode(_post.User.Name))&background=random" width="70">
                            <small class="ml-2">
                                @_post.User.Name <span class="text-muted d-block">@_post.PublishedAt.ToDisplay()</span>
                            </small>
                        </div>
                    </div>
                    <!-- Post image -->
                    <div class="col-md-6 pr-0">
                        <img src="@_post.Image">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Post content and subscription section -->
    <div class="container pt-4 pb-4">
        <div class="row justify-content-center">
            <div class="col-md-12">
                <article class="article-post">
                    <!-- Render post content as HTML -->
                    @((MarkupString)_post.Content)
                </article>
                <!-- Subscribe section -->
                <SubscribeHeroSection />
            </div>
        </div>
    </div>

    <!-- Related posts section -->
    <div class="container pt-4 pb-4">
        <h5 class="font-weight-bold spanborder"><span>Read next</span></h5>
        <!-- Display related posts -->
        <FeaturedBlogPosts Posts="_releatedPosts" />
    </div>
}
@code {
    // Define parameter for post slug
    [Parameter]
    public string postSlug { get; set; }

    // Define variables
    private Post _post = new();
    private Post[] _releatedPosts = [];

    // Method invoked when the component is initialised
    protected override async Task OnInitializedAsync()
    {
        // Fetch post by slug from the backend
        var result = await PostService.GetPostBySlugAsync(postSlug);
        // If post is not found, redirect to home page
        if (result.IsEmpty)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }
        // Assign fetched post and related posts to variables
        _post = result.post;
        _releatedPosts = result.RelatedPosts;
    }
}