@page "/admin/manage-posts/new"
@using BlogBlast.Data.Entities

@*^^ Disabled Pre-Rendering ^^*@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@* Injected the IPostAdminService & ICategoryService dependency into the component *@
@inject IPostAdminService PostService
@inject ICategoryService CategoryService

@* Included CSS files for Quill rich text editor stylesheets. *@
<HeadContent>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet" />
</HeadContent>

@* Include JavaScript files for Quill rich text editor functionality.
   These scripts include Blazored.TextEditor dependencies. *@
<SectionContent SectionName="scripts">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
</SectionContent>

@* Render the admin header with a title and a button to add a new post *@
<AdminHeader Title="Create a new Post" />

@* Check if the component is in a loading state and display a loading indicator if true *@
@if (_isLoading)
{
    <LoadingState LoadingText="@_loadingText" />
}

@* Form Implimentation *@
<EditForm Model="_model">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-sm-6">
            @* Title Input *@
            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText @bind-Value="_model.Title" class="form-control form-control-sm" placeholder="Post Title" />
                <ValidationMessage For="() => _model.Title" class="text-danger" />
            </div>
            @* Category Input *@
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_model.CategoryId" class="form-control form-control-sm">
                    <option value="0">Select Category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _model.CategoryId" class="text-danger" />
            </div>
            @* Introduction Input *@
            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <InputText @bind-Value="_model.Introduction" class="form-control form-control-sm" placeholder="Post Introduction" />
                <ValidationMessage For="() => _model.Introduction" class="text-danger" />
            </div>
            @* Upload Image Input *@
            <div class="mb-3">
                <label class="form-label d-block">Upload Image</label>
                <InputFile />
            </div>
            @* Featured Checkbox *@
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.IsFeatured" class="form-check-input" />
                    Featured
                </label>
            </div>
            @* Published Checkbox *@
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.IsPublished" class="form-check-input" />
                    Published
                </label>
            </div>
            @* Create Button *@
            <div class="mb-3">
                <button type="submit" class="btn btn-success">Create</button>
            </div>
        </div>
        <div class="col-sm-6"></div>
    </div>
</EditForm>

@code {
    // Declared private fields to manage loading state and display loading text
    private bool _isLoading;
    private string? _loadingText;
    private Post _model = new Post(); // Initialised a new Post model

    private Category[] _categories = [];// Initialised an array to store categories

    // Initialised the component asynchronously when it is first rendered
    protected override async Task OnInitializedAsync()
    {
        // Fetching categories from the CategoryService
        _categories = await CategoryService.GetCategoriesAsync();
    }
}
