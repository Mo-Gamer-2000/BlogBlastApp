@* Defined the route for creating a new post and editing an existing post *@
@page "/admin/manage-posts/new"
@page "/admin/manage-posts/edit/{id:int?}"

@* Imported necessary namespaces *@
@using BlogBlast.Data.Entities
@using Blazored.TextEditor

@* Enabled pre-rendering for the rich text editor to reload from the server *@
@rendermode InteractiveServer

@* Injected dependencies *@
@inject AuthenticationStateProvider AuthStateProvider
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager
@inject IPostAdminService PostService
@inject ICategoryService CategoryService

@* Included CSS files for Quill rich text editor stylesheets *@
<HeadContent>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
</HeadContent>

@* Included JavaScript files for Quill rich text editor functionality *@
<SectionContent SectionName="scripts">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
</SectionContent>

@* Renderd admin header with title and button to go back *@
<AdminHeader Title="Create a new Post">
    <ActionButtons>
        <NavLink href="/admin/manage-posts" class="btn btn-sm btn-primary">Go Back</NavLink>
    </ActionButtons>
</AdminHeader>

@* Check if the component is in a loading state and display a loading indicator if true *@
@if (_isLoading)
{
    <LoadingState LoadingText="@_loadingText" />
}

@* Form Implimentation *@
<EditForm Model="_model" OnValidSubmit="SavePostAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm-6">
            @* Title Input *@
            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText @bind-Value="_model.Title" class="form-control form-control-sm" placeholder="Post Title" />
                <ValidationMessage For="() => _model.Title" class="text-danger" />
            </div>
            @* Category Input *@
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_model.CategoryId" class="form-control form-control-sm">
                    <option value="0">Select Category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _model.CategoryId" class="text-danger" />
            </div>
            @* Introduction Input *@
            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <InputText @bind-Value="_model.Introduction" class="form-control form-control-sm" placeholder="Post Introduction" />
                <ValidationMessage For="() => _model.Introduction" class="text-danger" />
            </div>
            @* Defined a validation rule for CategoryId to ensure it starts from 1, preventing null categories *@
            @if (!string.IsNullOrWhiteSpace(_imageUrl)) 
            {
                @* Displaying the uploaded image if the image URL is not empty *@
                <div class="mb-3">
                    <img src="@_imageUrl" style="height: 200px" alt="Uploaded Images" />
                </div>
            }
            @* Upload Image Input *@
            <div class="mb-3">
                <label class="form-label d-block">Upload Image</label>
                <InputFile OnChange="FileUploadHandlerAsync" />
            </div>
            @* Featured Checkbox *@
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.IsFeatured" class="form-check-input" />
                    Featured
                </label>
            </div>
            @* Published Checkbox *@
            <div class="mb-3">
                <label class="form-label ml-3">
                    <InputCheckbox @bind-Value="_model.IsPublished" class="form-check-input" />
                    Published
                </label>
            </div>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="mb-3">
                    <p class="text-danger">@_errorMessage</p>
                </div>
            }
            @* Create Button *@
            <div class="mb-3">
                <button type="submit" class="btn btn-success">Save</button>
            </div>
        </div>
        @* Rich Text-Editor *@
        <div class="col-sm-6 d-flex">
            <div class="mb-3 flex-grow-1">
                <label class="form-label">Content: </label>
                <BlazoredTextEditor @ref="@quillHtml" Placeholder="Enter content..."> @* Ref passed here *@
                    <ToolbarContent>
                        @* Select header level *@
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        @* Formatting options *@
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        @* Text and background color options *@
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        @* List options *@
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        @* Insert hyperlink *@
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    @* Display editor content *@
                    <EditorContent>
                        @((MarkupString)_model.Content)
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
        </div>
    </div>
</EditForm>

@code {
    // Define component parameters and properties
    [Parameter]
    public int? Id { get; set; }

    // Declare private fields to manage loading state and display loading text
    private bool _isLoading; // Indicates if the component is in a loading state
    private string? _loadingText; // Text to display when the component is loading
    private Post _model = new Post(); // Initialise a new Post model for data binding

    private Category[] _categories = []; // Initialise an array to store categories

    // Declare a nullable BlazoredTextEditor field named quillHtml, passed in the ref
    private BlazoredTextEditor? quillHtml;

    // Declare a nullable _imageUrl field to be used as the src attribute of the img element
    private string? _imageUrl;

    // Declare a nullable _fileToUpload field to store the uploaded file
    private IBrowserFile? _fileToUpload;

    private string? _errorMessage; // Store error messages during async operations

    // Initialises the component asynchronously when it is first rendered
    protected override async Task OnInitializedAsync()
    {
        // Fetches categories from the CategoryService
        _categories = await CategoryService.GetCategoriesAsync();

        // Checks if the Id parameter is provided and greater than 0
        if (Id.HasValue && Id > 0)
        {
            // Retrieves the post from the PostService based on the provided Id
            var post = await PostService.GetBlogPostsByIdAsync(Id.Value);

            // If the post is not found, navigates back to the manage-posts page
            if (post is null)
            {
                NavigationManager.NavigateTo("/admin/manage-posts", replace: true);
                return;
            }

            // Assigns the retrieved post to the _model variable
            _model = post;

            // Updates the _imageUrl with the post's image
            _imageUrl = post.Image;
        }
    }


    // Asynchronously preview the uploaded image
    private async Task PreviewImageAsync(IBrowserFile file)
    {
        // Extract the file extension
        var extension = Path.GetExtension(file.Name)[1..];

        // Open a stream to read the uploaded image
        using var imageStream = file.OpenReadStream();

        // Initialise a memory stream to store the image data
        using MemoryStream ms = new();

        // Copy the image data from the stream to the memory stream
        await imageStream.CopyToAsync(ms);

        // Construct the image URL with base64-encoded image data
        _imageUrl = $"data:image/{extension};base64,{Convert.ToBase64String(ms.ToArray())}";
    }

    // Handle the asynchronous file upload process
    private async Task FileUploadHandlerAsync(InputFileChangeEventArgs e)
    {
        // Preview the uploaded image and assign the file to _fileToUpload
        await PreviewImageAsync(e.File);
        _fileToUpload = e.File;
    }

    // Save the file to disk asynchronously
    private async Task<string?> SaveFileToDiscAsync(IBrowserFile browserFile)
    {
        var randomFileName = Path.GetRandomFileName();
        var extension = Path.GetExtension(browserFile.Name);
        var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "posts");
        Directory.CreateDirectory(folderPath);
        var fileNamePath = Path.Combine("images", "posts", randomFileName + extension);
        var fullPath = Path.Combine(WebHostEnvironment.WebRootPath, fileNamePath);
        await using FileStream fs = new FileStream(fullPath, FileMode.Create);
        try
        {
            await browserFile.OpenReadStream().CopyToAsync(fs);

            // Modify the path to conform to web conventions
            return fileNamePath.Replace("\\", "/");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            fs.Close();

            return null;
        }
    }

    // Save the post asynchronously
    private async Task SavePostAsync()
    {
        try
        {
            // Get the HTML content from the BlazoredTextEditor
            var content = await quillHtml!.GetHTML();
            if (string.IsNullOrEmpty(content))
            {
                _errorMessage = "The Content is Required!";
                return;
            }
            _model.Content = content;

            // Set loading text and indicate that the component is loading
            _loadingText = "Saving Post";
            _isLoading = true;

            // Upload the file if present and update the model with the image URL
            if (_fileToUpload is not null)
            {
                var uploadedFileUrl = await SaveFileToDiscAsync(_fileToUpload);
                if (uploadedFileUrl is null)
                    return;

                _model.Image = uploadedFileUrl;
            }

            // Get the current user ID
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.GetUserId();

            // Save the post using the PostService
            await PostService.SaveBlogPostAsync(_model, userId);
            _fileToUpload = null;
            NavigationManager.NavigateTo("/admin/manage-posts", true); // Navigate to the manage-posts page
            return;
        }
        catch (Exception ex)
        {
            // Handle any exceptions and set the error message
            _errorMessage = ex.Message;
            _isLoading = false; // Indicate that the loading process is complete
        }
    }
}
