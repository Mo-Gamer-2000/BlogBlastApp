@page "/admin/manage-posts"
@using BlogBlast.Data.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

@*^^ Disabled Pre-Rendering ^^*@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@* Injected the IPostAdminService dependency into the component *@
@inject IPostAdminService PostService

@* Render the admin header with a title and a button to add a new post *@
<AdminHeader Title="Manage Posts">
    <ActionButtons>
        <a href="admin/manage-posts/new" class="btn btn-primary btn-sm" data-enhance-nav="false">Add Post</a>
        @* SOLUTION FOUND HERE: https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-8.0 *@
    </ActionButtons>
</AdminHeader>

@* Check if the component is in a loading state and display a loading indicator if true *@
@if (_isLoading)
{
    <LoadingState LoadingText="@_loadingText" />
}

@* Used the QuickGrid component to display posts in a grid format *@
<QuickGrid ItemsProvider="_postsProvider" Pagination="_paginationState" class="table table-bordered table-striped table-hover">
    <PropertyColumn Property="@(b => b.Id)" /> @* Display post ID *@
    <TemplateColumn Title="Image and Slug">
        <div class="py-2" style="display: grid; grid-template-columns: 60px auto; grid-column-gap: 10px;">
        <img src="@context.Image" style="height: 60px; width: 60px; object-fit: cover" alt="Current Image" /> @* Display Current Image *@
       <div>
           <label class="mb-0 d-block">@context.Title</label>
           @if(context.IsPublished)
                {
                    <a href="/details" target="_blank">@context.Slug</a>
                }
                else
                {
                    <label>@context.Slug</label>
                }
            </div>
    </div>
    </TemplateColumn>
    <PropertyColumn Property="@(b => b.Category.Name)" Title="Category" /> @* Display Category Name *@
    @* Defined a custom column for the "Visible on Navbar" property *@
    <TemplateColumn Title="Featured">
        @* Check if VisibleOnNavbar property is true or false for each category *@
        @if (context.IsFeatured)
        {
                            // If True, then display a checkbox with "Yes" label
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandleFeaturedChanged(context))" checked /> Yes
            </label>
        }
        else
        {
                            // If False, then display a checkbox with "No" label
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandleFeaturedChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    @* Defined a custom column for the "Visible on Navbar" property *@
    <TemplateColumn Title="Published">
        @* Check if VisibleOnNavbar property is true or false for each category *@
        @if (context.IsPublished)
        {
                            // If True, then display a checkbox with "Yes" label
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" checked /> Yes
            </label>
        }
        else
        {
                            // If False, then display a checkbox with "No" label
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    @* Defined a column for editing each category *@
    <TemplateColumn>
        <a href="admin/manage-blog-posts/edit/@context.Id" data-enhance-nav="false" class="btn btn-sm btn-primary">Edit</a>
    </TemplateColumn>
</QuickGrid>

@* Included a paginator component to handle pagination *@
<Paginator State="_paginationState" />

<style type="text/css">
    .table > tbody > tr > td {
        vertical-align: middle;
        /* text-align: center; */
    }
</style>

@code {
    // Declared private fields to manage loading state and display loading text
    private bool _isLoading;
    private string? _loadingText;

    // Defined the page size for pagination
    private const int PageSize = 10;

    // Defined Pagination State
    private PaginationState _paginationState = new PaginationState 
    { 
            ItemsPerPage = PageSize // Set the number of items per page
    };

    // Defined the provider for the QuickGrid component to fetch and display posts
    private GridItemsProvider<Post> _postsProvider;

    // Initialised the component when it is first rendered
    protected override void OnInitialized()
    {
        // Defined the items provider for the QuickGrid component
        _postsProvider = async request =>
        {
            // Set loading state to true and display loading text
            _isLoading = true;
            _loadingText = "Fetching Posts...";
            // Fetching posts from the service based on the request parameters
            PagedResult<Post> pagedBlogs = await PostService.GetBlogPostsAsync(request.StartIndex, request.Count ?? PageSize);
            // Setting loading state to false
            _isLoading = false;
            // Returned the fetched posts and total count to be displayed by the QuickGrid component
            return GridItemsProviderResult.From(pagedBlogs.Records, pagedBlogs.TotalCount);
        };
    }

    private async Task HandleFeaturedChanged(Post post)
    {
        
    }private async Task HandlePublishedChanged(Post post)
    {
        
    }
}
