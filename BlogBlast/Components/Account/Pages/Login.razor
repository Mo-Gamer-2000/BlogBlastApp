@*
     * This Razor component represents the login page of the BlogBlast application.
     * It allows users to log in using their email and password.
     * The component includes form validation and error handling.
 *@

@page "/Account/Login"

@* Importing necessary namespaces *@
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlogBlast.Data
@using System.Security.Claims

@* Injecting required services *@
@inject SignInManager<ApplicationUser> SignInManager 
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@Utility.GetPageTitle("Login")</PageTitle>

<!-- Header section -->
<div class="container-fluid">
    <div class="text-center p-0 m-0">
        <h1 class="logo-text">Blog<span class="blast-text">Blast</span></h1>
    </div>
</div>

<!-- Login form section -->
<div class="container d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 250px)">
    <div class="col-md-6 col-lg-4 shadow p-4 rounded">
        <h2 class="text-center mb-4">Log in to BlogBlast</h2> 
        <StatusMessage Message="@errorMessage" /> <!-- Displays error messages, if any -->
        <EditForm Model="Input" method="post" OnValidSubmit="PerformLoginAsync" FormName="login">
            <!-- Initializes login form -->
            <DataAnnotationsValidator /> <!-- Validates form fields based on data annotations -->
            <hr />
            <ValidationSummary class="text-danger" /> <!-- Displays validation summary -->
            <!-- Email input field -->
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Enter your email" /> <!-- Allows users to input email -->
                <ValidationMessage For="() => Input.Email" class="text-danger" /> <!-- Displays validation message for email -->
            </div>
            <!-- Password input field -->
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />  <!-- Allows users to input password -->
                <ValidationMessage For="() => Input.Password" class="text-danger" /> <!-- Displays validation message for password -->
            </div>
            <!-- Remember me checkbox -->
            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Remember me</label>
            </div>
            <!-- Submit button -->
            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-block">Log in</button> <!-- Submits login form -->
            </div>
        </EditForm>
    </div>
</div>

<style>
    .logo-text {
        font-family: 'Arial', sans-serif; 
        font-size: 36px; 
        font-weight: bold; 
        color: #000; 
    }

    .blast-text {
        color: #ff6600;
    }

</style>

@code {
    private string? errorMessage; // Stores error message if any

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!; // Gets the HTTP context

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new(); // Initialises InputModel for form data

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/admin/dashboard"; // Sets the default return URL

    // Performs necessary actions on component initialisation
    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme); // Clears external cookie
        }
    }

    // Performs login operation
    private async Task PerformLoginAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email); // Finds user by email
        if (user is null) // Checks if user does not exist
        {
            errorMessage = "Error: Invalid login attempt."; // Sets error message
            return;
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, false); // Checks user's password
        if (!result.Succeeded) // Checks if password is incorrect
        {
            errorMessage = "Error: Wrong password."; // Sets error message
        }

        // If user exists and password is correct, signs in with additional claims
        Claim[] additionalClaims = new Claim[] { new Claim(AppConstants.ClaimNames.FullName, user.Name) }; // Defines additional claims
        await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, additionalClaims); // Signs in user with additional claims

        Logger.LogInformation("User logged in."); // Logs user login
        RedirectManager.RedirectTo(ReturnUrl); // Redirects user after login
    }

    // Defines input model for login form
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = ""; // Defines email property with validation

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = ""; // Defines password property with validation

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } // Defines remember me property
    }
}