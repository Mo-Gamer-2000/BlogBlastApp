@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlogBlast.Data
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager /* IMPORTED USER MANAGER */

<PageTitle>@Utility.GetPageTitle("Login")</PageTitle>
<div class="container-fluid">
    <div class="text-center p-0 m-0">
        <h1 class="logo-text">Blog<span class="blast-text">Blast</span></h1>
    </div>
</div>

<div class="container d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 250px)">
    <div class="col-md-6 col-lg-4 shadow p-4 rounded">
        <h2 class="text-center mb-4">Log in to BlogBlast</h2>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="PerformLoginAsync" FormName="login">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label">Remember me</label>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-block">Log in</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .logo-text {
        font-family: 'Arial', sans-serif; /* Use your preferred font family */
        font-size: 36px; /* Adjust the font size as needed */
        font-weight: bold; /* Ensure the text is bold for prominence */
        color: #333; /* Adjust the color as per your design */
    }

    .blast-text {
        color: #ff6600; /* Change the color for the "Blast" part */
    }

</style>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/admin/dashboard";

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    // Created method to check if the user exists
    private async Task PerformLoginAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email); // Get the user by Email
        if(user is null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        // If user excists
        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, false); // Check the password
                                                                                                // Check if the password was inccorrect
        if(!result.Succeeded) 
        {
            errorMessage = "Error: Wrong password.";
        }
        // If now the user excists and password is correct then do this
        // Used Claim Array to check Additional Claim
        Claim[] additionalClaim = [new Claim(AppConstants.ClaimNames.FullName, user.Name)]; // Getting the user Name from App Constants
        await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, additionalClaim);

        Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
