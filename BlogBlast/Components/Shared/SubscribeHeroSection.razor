<!-- Importing necessary namespaces and injecting services -->
@using BlogBlast.Data.Entities
@attribute [StreamRendering]
@inject ISubscriptionService SubscriptionService

<!-- Subscription form section -->
<div class="border p-5 bg-lightblue">
    <!-- Subscription form layout -->
    <div class="row justify-content-between">
        <!-- Introduction to subscription -->
        <div class="col-md-6">
            <h5 class="font-weight-bold secondfont">Become a member</h5>
            Get the latest news right in your inbox. It's free and you can unsubscribe at any time. We hate spam as much as you do, so we never spam!
        </div>
        <!-- Subscription form -->
        <div class="col-md-6">
            <!-- EditForm for subscription -->
            <EditForm Model="Model" method="post" OnValidSubmit="SubscriptionAsync" FormName="subscription-form" Enhance>
                <DataAnnotationsValidator />
                <div class="row">
                    <!-- Input field for Name -->
                    <div class="col-md-6">
                        <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                        <ValidationMessage For="() => Model.Name" class="text-danger" />
                    </div>
                    <!-- Input field for Email -->
                    <div class="col-md-6">
                        <InputText type="email" @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                        <ValidationMessage For="() => Model.Email" class="text-danger" />
                    </div>
                    <!-- Display message for subscription status -->
                    @if (!string.IsNullOrWhiteSpace(_message))
                    {
                        <div class="col-md-12">
                            <p class="m-0 p-0">@_message</p>
                        </div>
                    }
                    <!-- Subscribe button -->
                    <div class="col-md-12 mt-3">
                        <button type="submit" class="btn btn-success btn-block">Subscribe</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Define a parameter for holding subscription details
    [SupplyParameterFromForm]
    private Subscription Model { get; set; } = new();

    // Variable to hold subscription status message
    private string? _message;

    /// <summary>
    /// Handles the subscription process.
    /// </summary>
    private async Task SubscriptionAsync()
    {
        // Displaying subscription in progress message
        _message = "You are Subscribing...";
        // Simulating delay for demonstration purpose
        await Task.Delay(1000);
        // Invoking subscription service to perform subscription
        var errorMessage = await SubscriptionService.SubscriptionAsync(Model);
        // Checking if there is any error message returned
        if (errorMessage is not null)
        {
            // If error message exists, display it
            _message = errorMessage;
        }
        else
        {
            // If no error message, display subscription success message
            _message = "You have Subscribed Successfully!";
            // Resetting subscription model for new subscription
            Model = new();
        }
    }
}
